// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_ComingSoonState
#include <ComingSoonState.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a55214e0452daa02_13_new,"TitleState","new",0x3b23deeb,"TitleState.new","TitleState.hx",13,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_20_enter,"TitleState","enter",0x0a5f7463,"TitleState.enter","TitleState.hx",20,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_24_burn,"TitleState","burn",0x7c5cbf64,"TitleState.burn","TitleState.hx",24,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_32_create,"TitleState","create",0x801cc151,"TitleState.create","TitleState.hx",32,0xd132a6e5)
static const int _hx_array_data_8ca18d79_4[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,(int)15,(int)16,(int)17,(int)18,(int)19,(int)20,(int)21,(int)22,(int)23,(int)24,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_48_update,"TitleState","update",0x8b12e05e,"TitleState.update","TitleState.hx",48,0xd132a6e5)

void TitleState_obj::__construct( ::Dynamic MaxSize){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_13_new)
HXLINE(  29)		this->openingscene =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  16)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  15)		this->text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1200,10,1000,HX_("Nitrotica",09,e6,1e,5e),100,null());
HXLINE(  13)		super::__construct(MaxSize);
            	}

Dynamic TitleState_obj::__CreateEmpty() { return new TitleState_obj; }

void *TitleState_obj::_hx_vtable = 0;

Dynamic TitleState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TitleState_obj > _hx_result = new TitleState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TitleState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x22c6bd01) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x22c6bd01;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void TitleState_obj::enter( ::flixel::util::FlxTimer timer){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_20_enter)
HXDLIN(  20)		 ::flixel::FlxState nextState =  ::ComingSoonState_obj::__alloc( HX_CTX ,null());
HXDLIN(  20)		if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXDLIN(  20)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleState_obj,enter,(void))

void TitleState_obj::burn( ::flixel::util::FlxTimer timer){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_24_burn)
HXLINE(  25)		::flixel::FlxG_obj::camera->flash(-65536,((Float)0.5),null(),null());
HXLINE(  26)		this->openingscene->animation->play(HX_("burnFire",a5,e7,f6,ff),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleState_obj,burn,(void))

void TitleState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_32_create)
HXLINE(  33)		this->openingscene->loadGraphic(HX_("assets/images/burn.png",b5,7f,4a,ae),true,1280,720,null(),null());
HXLINE(  34)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/menu.ogg",36,37,34,fd),1,true,null());
HXLINE(  35)		this->openingscene->animation->add(HX_("burnFire",a5,e7,f6,ff),::Array_obj< int >::fromData( _hx_array_data_8ca18d79_4,25),24,false,null(),null());
HXLINE(  38)		this->add(this->openingscene);
HXLINE(  39)		this->add(this->text);
HXLINE(  40)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/menu.ogg",36,37,34,fd),1,true,null());
HXLINE(  41)		this->bg->loadGraphic(HX_("assets/images/titleBG.png",4d,d7,0f,76),null(),null(),null(),null(),null());
HXLINE(  42)		::flixel::FlxG_obj::camera->flash(-16777216,1,null(),null());
HXLINE(  43)		::flixel::tweens::FlxTween_obj::tween(this->text, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),10)
            			->setFixed(1,HX_("y",79,00,00,00),10)),((Float)0.5),null());
HXLINE(  44)		this->super::create();
            	}


void TitleState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_48_update)
HXLINE(  49)		this->super::update(elapsed);
HXLINE(  51)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  51)		if (_this->keyManager->checkStatus(13,_this->status)) {
HXLINE(  53)			::flixel::FlxG_obj::camera->flash(-65536,1,null(),null());
HXLINE(  54)			::flixel::tweens::FlxTween_obj::tween(this->text, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),-1000)
            				->setFixed(1,HX_("y",79,00,00,00),10)),((Float)0.5),null());
HXLINE(  55)			::flixel::FlxG_obj::sound->playMusic(HX_("null",87,9e,0e,49),null(),null(),null());
HXLINE(  56)			::flixel::FlxG_obj::sound->play(HX_("assets/music/fire.ogg",cd,1c,2d,76),null(),null(),null(),null(),null());
HXLINE(  57)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)2.5),this->burn_dyn(),null());
HXLINE(  58)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(4,this->enter_dyn(),null());
            		}
            	}



::hx::ObjectPtr< TitleState_obj > TitleState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< TitleState_obj > __this = new TitleState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< TitleState_obj > TitleState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	TitleState_obj *__this = (TitleState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TitleState_obj), true, "TitleState"));
	*(void **)__this = TitleState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

TitleState_obj::TitleState_obj()
{
}

void TitleState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TitleState);
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(openingscene,"openingscene");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TitleState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(openingscene,"openingscene");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TitleState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"burn") ) { return ::hx::Val( burn_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"enter") ) { return ::hx::Val( enter_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"openingscene") ) { return ::hx::Val( openingscene ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TitleState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"openingscene") ) { openingscene=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TitleState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("openingscene",f4,b6,e9,5f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TitleState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(TitleState_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,openingscene),HX_("openingscene",f4,b6,e9,5f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TitleState_obj_sStaticStorageInfo = 0;
#endif

static ::String TitleState_obj_sMemberFields[] = {
	HX_("text",ad,cc,f9,4c),
	HX_("bg",c5,55,00,00),
	HX_("enter",18,6d,86,70),
	HX_("burn",4f,14,20,41),
	HX_("openingscene",f4,b6,e9,5f),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class TitleState_obj::__mClass;

void TitleState_obj::__register()
{
	TitleState_obj _hx_dummy;
	TitleState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TitleState",79,8d,a1,8c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TitleState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TitleState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TitleState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TitleState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

